fastlane_version "1.51.0"
default_platform :ios

PROJECT_FILE_PATH = './MISpring.xcodeproj'
APP_NAME = '米折'
SCHEME_NAME = 'MISpring'

APPSTORE_IDENTIFIER = 'com.mizhe.spring'
APPSTORE_CODESIGNING_IDENTITY = 'iPhone Distribution: Husor Inc. (NEPH5T7SP8)'

INHOUSE_CODESIGNING_IDENTITY = 'iPhone Developer: lianglun zhang (96AMM8QB94)'

ENTERPRISE_IDENTIFIER = 'com.mizhe.spring.enterprise'
ENTERPRISE_CODESIGNING_IDENTITY = 'iPhone Distribution: Hunet Inc.'

PLIST_FILE_PATH = './MISpring/MISpring-Info.plist'

# 更新bundle信息
def update_app_bundle(bundle)
  update_app_identifier(
    xcodeproj: PROJECT_FILE_PATH ,
    plist_path: "#{PLIST_FILE_PATH}",
    app_identifier: bundle
  )
end

def prepare_version(options)
    #增加build号  只能是整数和浮点数
    #say 'build number:'
    #say options[:build]
  
    today = Time.new
    increment_build_number(
        build_number: today.strftime("%m%d%H%M"),
        xcodeproj: "#{PROJECT_FILE_PATH}",
    )
end

# 设置Info_plist_value里的值
def set_info_plist_value(path,key,value)
    #sh 这里是fastline目录里
    sh "/usr/libexec/PlistBuddy -c \"set :#{key} #{value}\" ../#{path}"
end

# 设置渠道信息
def set_channel_id(channelId)
    set_info_plist_value(
        "#{PLIST_FILE_PATH}",
        "ChannelID",
        "#{channelId}"
    )
end

# 打包
def generate_ipa(typePrefix,codesigningIdentity,exportMethod,options)
    #say 'generate ipa'

    #fullVersion = options[:version] + '.' + options[:build]
    #channelId = options[:channel_id]


    gym(
      workspace: './MISpring.xcworkspace',
      scheme: 'MISpring',
      clean: true,
      output_directory: './build/',
      output_name: 'mizhe.ipa',
      configuration: 'Release',
      codesigning_identity: "#{codesigningIdentity}",
      include_symbols: 'true',
      include_bitcode: 'false',
      provisioning_profile_path: "./fastlane/provision/#{typePrefix}.mobileprovision",
      archive_path: './build/',
      export_method: "#{exportMethod}"
    )

    # sh "mv ./../build/#{APP_NAME}.app.dSYM.zip ./../build/#{APP_NAME}_#{fullVersion}_#{typePrefix}.app.dSYM.zip"
end

platform :ios do

  before_all do
    cocoapods(
      repo_update: false
    )
    #ENV["SLACK_URL"] = "https://hooks.slack.com/services/zunyuan.li"
  end

  desc "Runs all the tests"
  lane :test do
    # snapshot
  end



  desc "打InHouse包"
  lane :InHouse do |options|

    typePrefix = 'InHouse'
    set_channel_id(typePrefix)
    prepare_version(options)
    update_app_bundle("#{APPSTORE_IDENTIFIER}")

    generate_ipa(typePrefix,"#{INHOUSE_CODESIGNING_IDENTITY}","ad-hoc",options)
  end

  desc "打AppStore包"
  lane :AppStore do |options|

    typePrefix = 'AppStore'
    set_channel_id(typePrefix)
    prepare_version(options)
    update_app_bundle("#{APPSTORE_IDENTIFIER}")

    generate_ipa(typePrefix,"#{APPSTORE_CODESIGNING_IDENTITY}","app-store",options)

    deliver(
      ipa: "./build/mizhe.ipa",
      skip_screenshots: true,
      skip_metadata: true,
      force: true,
      submit_for_review: false,

    )
  end

  desc "打企业包"
  lane :Enterprise do |options|

    typePrefix = 'Enterprise'
    set_channel_id(typePrefix)
    prepare_version(options)
    update_app_bundle("#{ENTERPRISE_IDENTIFIER}")

    generate_ipa(typePrefix,"#{ENTERPRISE_CODESIGNING_IDENTITY}","enterprise",options)
  end



  # You can define as many lanes as you want
  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
     #slack(
     #  message: "Successfully deployed new App Update."
     #)
  end


  error do |lane, exception|
     #slack(
     #  message: exception.message,
     #  success: false
     #)
  end
end
